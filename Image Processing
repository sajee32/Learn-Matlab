You can import an image into memory and assign it to a variable in the MATLAB workspace for later manipulation, display, and export.

A = imread("imgFile.jpg");

Ending the line with a semicolon stops MATLAB from displaying the values stored in A, which is helpful since images typically contain millions of values.

Image data stored in a variable A can be displayed using the imshow function.

imshow(A)

You can display two images together using the imshowpair function.

imshowpair(A1,A2,"montage")

The "montage" option places the images A1 and A2 side-by-side, with A1 on the left and A2 on the right.

The function imwrite exports data stored in the MATLAB Workspace to an image file.

imwrite(imgData,"img.jpg")

The output file format is automatically identified based on the file extension.

You can find the size of an array using the size function.

sz = size(A)

The first value returned by size is the number of rows in the array, which corresponds to the height of the image. The second value is the number of columns in the array, which corresponds to the width of the image.

Most images use the unsigned 8-bit integer (uint8) data type, which stores integers from 0 to 255. Bright or brightly colored images contain pixel intensity values near 255 in one or more color planes.

You can find the largest value in an array using the max function.

Amax = max(A,[],"all")

 if you want to extract all three color planes of an image array, you can use imsplit instead of indexing into each plane individually.

[R,G,B] = imsplit(A);

You can display all three color planes at once using montage.

montage({R,G,B})


contrast in an image by viewing its intensity histogram using the imhist function.

imhist(I)

If the histogram shows pixels binned mainly at the high and low ends of the spectrum, the receipt has good contrast. If not, it could probably benefit from a contrast adjustment.
Increasing image contrast brightens brighter pixels and darkens darker pixels. You can use the imadjust function to adjust the contrast of a grayscale image automatically.

Aadj = imadjust(A);



To automate the threshold selection process, you can use the imbinarize function, which calculates the "best" threshold for the image.

gBinary = imbinarize(g);


By default, the foreground of an image is assumed to be bright and the background dark. But for receipts, the foreground is the dark text, and the background is bright.

In imbinarize, you can designate whether the foreground is bright or dark by setting the "ForegroundPolarity" option.
gBinary = imbinarize(g,"adaptive",...
            "ForegroundPolarity","dark")
            
            
            
Images taken in low light often become noisy due to the increase in camera sensitivity required to capture the image. This noise can interfere with receipt identification by
polluting regions in the binarized image.

To reduce the impact of this noise on the binary image, you can preprocess the image with an averaging filter.

Use the fspecial function to create an n-by-n averaging filter.

F = fspecial("average",n)

You can apply a filter F to an image I by using the imfilter function.
Ifltr = imfilter(I,F);

If you look closely, you can see that filtering introduced a small, unwanted dark outline to parts of the binary image border. That's because the default setting of imfilter sets pixels outside the image to zero.

To adjust this behavior, use the "replicate" option.

Ifltr = imfilter(I,F,"replicate");

Instead of zeros, the "replicate" option uses pixel intensity values on the image border for pixels outside the image.



You can compute the sum across rows of an array using the sum function.
rSum = sum(BW,2)

In a receipt image, the background is anything that is not text. By using a structuring element larger than a typical letter, each "window" captures what's behind the text and not the text itself.

Structuring elements are created using the strel function.

SE = strel("diamond",5)

The code above defines SE as a diamond-shaped structuring element with radius 5 pixels (the distance from the center to the points of the diamond).

The foreground (the text) is dark, and the background is bright. Closing the image will emphasize and connect the brighter background, removing the thin dark lettering. Larger background objects, like the thumb, will remain. The final result: an image of the background without the text.

To perform a closing operation on an image I with structuring element SE, use the imclose function.

Iclosed = imclose(I,SE);



Now that you've isolated the background Ibg, you can remove it from gs. In general, you can remove one image from another by subtracting it.

Isub = I2 - I1;

Because imclose emphasizes brightness in an image, the background image Ibg has higher intensities than gs. Subtracting Ibg from gs would result in negative intensities.




